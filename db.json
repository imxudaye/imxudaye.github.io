{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1638865569768},{"_id":"source/about/index.md","hash":"96eec1cf932e83d0f89aecd62a589c841dcb68e6","modified":1638869842908},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"cd5cbd070b6190aa0b4839400c0a1581e2654470","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"c7d9519fb17a83b0c49cacee10aeab4628a164cb","modified":1638869408637},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"666476260a2cead2cc2928d51977c4a7ba8de6bb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"7d0cf31f2595cfe6d5ad31d569654f21a00dfd77","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"8e33f915028ac56258f6999d19b1ad8d800cecfe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"a7ed1d3079c32497c8955ca75f5fb6992e5ffb8b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ece659572cf4e12638a1607fca512c25098bbd82","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"63aedd67d90d641cc672540db20ef615f528c9f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"cd55a2dce6b9d3e165a0a26d0b5bf7f649006bcd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"c66e0da2c0d05e76a686a77ab4e74f0d2e89777d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"public/local-search.xml","hash":"33ece2701fab02b59944cd3fcab61968d730ff02","modified":1639035241797},{"_id":"public/about/index.html","hash":"ad6a24c1b0bab8dba47096b2284e377387127793","modified":1639033650985},{"_id":"public/2021/12/07/hello-world/index.html","hash":"3b7e91642e528b181c370a659be1b8deac58b620","modified":1639033650985},{"_id":"public/archives/index.html","hash":"7207f516ecd791a276eea03a3c6a669d64395ab1","modified":1639034803444},{"_id":"public/archives/2021/index.html","hash":"d14c889920a9c2cc2b29deb1cc9a7eae22412dd1","modified":1639034449926},{"_id":"public/archives/2021/12/index.html","hash":"3f60434f6dceaa02234fa0d036972eebd76f457e","modified":1639034449926},{"_id":"public/index.html","hash":"64fbf559d7f2f5a6da8f4231454053a1e35c8637","modified":1639035241797},{"_id":"public/404.html","hash":"cfc8cc8af5c9217d4cace66f44f59d3e09395fae","modified":1639033650985},{"_id":"public/tags/index.html","hash":"223104dae8728afd3b0b0c0c0b903e4f1021b881","modified":1639035241797},{"_id":"public/categories/index.html","hash":"f5af9929fd875dabb2029cb68d6841aa4a1bd2e3","modified":1639034803444},{"_id":"public/links/index.html","hash":"805bdaa3ef8a6045de4affc633fe00a27391224f","modified":1639033650985},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1638869883273},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1638869883273},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1638869883273},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1638869883273},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1638869883273},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1638869883273},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1638869883273},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1638869883273},{"_id":"public/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1638869883273},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1638869883273},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1638869883273},{"_id":"public/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":1638869883273},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1638869883273},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1638869883273},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1638869883273},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1638869883273},{"_id":"public/css/main.css","hash":"80b7c3dc3f47db8b700b4437bdf45706fe504f66","modified":1638869883273},{"_id":"source/_posts/WireGuard 服务建记录.md","hash":"64ddf98454a1c92b956ca503efe81b7afdc2f918","modified":1639035142476},{"_id":"source/_posts/垃圾收集器.md","hash":"b50991bdce5513a7a695686118de4a25a20ae44d","modified":1639035230722},{"_id":"source/_posts/关于数据序列化的小结.md","hash":"54f62312f2c3b0b28732ad4a279a52dd05fd72f0","modified":1639035164152},{"_id":"source/_posts/ES 操作简单总结.md","hash":"e0d04f1a6cb9cf5bf7d5a479bc07b9f6ce95bbb8","modified":1639035040779},{"_id":"source/_posts/Linux设置swap.md","hash":"c683adfcc70abd21f74301e4211f525c2474dd0e","modified":1639035034567},{"_id":"source/_posts/编译器调优.md","hash":"c16a0d22be07cdc42975f2eed69e8bdf5f5315b0","modified":1639035224191},{"_id":"public/2021/12/01/ES 操作简单总结/index.html","hash":"7e311ac09ae306333a64d3e9911f2b0da555c609","modified":1639034319207},{"_id":"public/2021/12/01/Linux设置swap/index.html","hash":"e10ca6d69f134b12b25dd83ab771ee54b199e89c","modified":1639033830897},{"_id":"public/archives/2021/11/index.html","hash":"823ddb28772ef0ecfd3ee40716112b25f9a76f8e","modified":1639034449926},{"_id":"public/2021/12/06/垃圾收集器/index.html","hash":"fe2e8d323ac224be46f3fe88df1ffd4a6edacf47","modified":1639033830897},{"_id":"public/2021/12/06/编译器调优/index.html","hash":"1967b020a5acd9106a2fe1c2fe6f109858f28b08","modified":1639033830897},{"_id":"public/2021/12/06/关于数据序列化的小结/index.html","hash":"e5a211a6b612a15b988853334446b53d8222de6f","modified":1639033830897},{"_id":"public/2021/11/30/WireGuard 服务建记录/index.html","hash":"cfb504198231868e2c81071e7615bb6bb41fd901","modified":1639034449926},{"_id":"source/linux/index.md","hash":"ee3aad7cb3a9371be4cf5ebd6130f6e2dfb3fc1e","modified":1639034252006},{"_id":"public/linux/index.html","hash":"65963e96577ceafd16f5b0c0135e495d02c1d0e7","modified":1639034319207},{"_id":"public/2018/05/26/Linux设置swap/index.html","hash":"0453ce7ea971cdfa2611362e43810cae4b01097d","modified":1639035241797},{"_id":"public/archives/2018/05/index.html","hash":"e1a32bcaedb477acbdca1c9361f4e883edf7d897","modified":1639034449926},{"_id":"public/archives/2018/index.html","hash":"bab2fde9f5bf3a78a2e28da3c0718d91d402f486","modified":1639034449926},{"_id":"public/categories/linux/index.html","hash":"115798bf393085f4eeee425f945d6a660099e90c","modified":1639034803444},{"_id":"source/linux/Linux设置swap.md","hash":"5e4d7befbdbf45844d3cc47f1fd1b4aac1638435","modified":1639034308822},{"_id":"public/linux/Linux设置swap.html","hash":"1fda48527167d0204bdd4aed78e9ebe12d5ca3ee","modified":1639034401577},{"_id":"source/后端/index.md","hash":"c787731d4494561217df732134bb15bd12e2face","modified":1639034655042},{"_id":"source/前端/index.md","hash":"1514acbb32549dd83867b2dffe96bb9ee56be048","modified":1639034655046},{"_id":"public/后端/index.html","hash":"3ab17ab9fa24c6cae483f719b45b0f55a53880b2","modified":1639034803444},{"_id":"public/前端/index.html","hash":"4d4530b3a13cb8f8cf54efed3c83da73a6165786","modified":1639034803444},{"_id":"public/2020/05/26/ES 操作简单总结/index.html","hash":"1837500d3cb3a1fe1a6eaa16aa2bab56ff1688f6","modified":1639035241797},{"_id":"public/archives/2020/index.html","hash":"3e5a0b655874eadf08d1a70dcb7e36058e150cf8","modified":1639034803444},{"_id":"public/archives/2020/05/index.html","hash":"14e832f07ee9a2834badcc861d303ac186a12481","modified":1639034803444},{"_id":"public/archives/2019/index.html","hash":"d0957ca0275220772eeddec9d0c461485e139f2a","modified":1639034803444},{"_id":"public/archives/2020/10/index.html","hash":"79225d1ead21e58712a268858004fd8b14ae58e1","modified":1639034803444},{"_id":"public/archives/2020/06/index.html","hash":"3d9e27756751f22bb26f0ba8e0b6ba3a199e18aa","modified":1639034803444},{"_id":"public/categories/后端/index.html","hash":"1dad6d63e7631c1d4492215b4320650674aada1a","modified":1639034803444},{"_id":"public/archives/2019/08/index.html","hash":"2042f03ac30de3a4dc10b2dcdc91db077ba536e9","modified":1639034803444},{"_id":"public/2020/10/09/垃圾收集器/index.html","hash":"c289f389e5000dcd431fe0f9cd4bef811babf0a8","modified":1639035241797},{"_id":"public/2020/10/09/编译器调优/index.html","hash":"d8f8b12b053735e441ef7029f6745b861cc6a43a","modified":1639035241797},{"_id":"public/2020/06/09/关于数据序列化的小结/index.html","hash":"f4b6b7924dfb8cf0539c1c4bb11174ebb6d483cc","modified":1639035241797},{"_id":"public/2019/08/11/WireGuard 服务建记录/index.html","hash":"1464142c03e1a1116feb264753782a78451d287a","modified":1639035241797},{"_id":"source/tags/index.md","hash":"fcbb6d917d0db180b8142fbb30de2a32342a3c2f","modified":1639034915873},{"_id":"public/tags/elasticsearch/index.html","hash":"3f4ff0a54902e7a876976a6163bdac3aa1ef895b","modified":1639035241797},{"_id":"public/tags/linux/index.html","hash":"6f209673762c458236831d7d0ebddb1e9c0aad6f","modified":1639035241797},{"_id":"public/tags/swap/index.html","hash":"21d6a68f2410c4a805f33eeb1cda98288be7a68c","modified":1639035241797},{"_id":"public/tags/WireGuard/index.html","hash":"5f4ce48dbc71718de2beef5eb17cf4b827b51d14","modified":1639035241797},{"_id":"public/tags/VPN/index.html","hash":"9aba56fc22ee0b08cfdfc8f73a6bd9a41cf9e2e1","modified":1639035241797},{"_id":"public/tags/序列化/index.html","hash":"eaf0a4ddabdae778036116ff5ef993b6ae9fe255","modified":1639035241797},{"_id":"public/tags/垃圾收集器/index.html","hash":"a5db93506df00fe6698de77a3fc7816c98d83dfe","modified":1639035241797},{"_id":"public/tags/JVM/index.html","hash":"c62263b35e156c88568fdb9c84e9c3e8c34aed90","modified":1639035241797},{"_id":"source/categories/index.md","hash":"65928a293826593bfb84fe27e1c5360001cf4275","modified":1639035673790}],"Category":[{"name":"linux","_id":"ckwympr2c0001l4gl6kv61ltp"},{"name":"后端","_id":"ckwyn04or0002pvgl42okhqop"}],"Data":[],"Page":[{"title":"about","date":"2020-02-23T11:20:33.000Z","layout":"about","_content":"\n日常记录\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n\n日常记录\n","updated":"2021-12-07T09:37:22.908Z","path":"about/index.html","comments":1,"_id":"ckwvwtbbh0000ituv3ap5hqv2","content":"<p>日常记录</p>\n","site":{"data":{}},"wordcount":4,"excerpt":"","more":"<p>日常记录</p>\n"},{"title":"标签","date":"2021-12-09T07:28:01.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-12-09 15:28:01\ntype: tags\n---\n","updated":"2021-12-09T07:28:35.873Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwyn9ix90000t2gl9zcp5nug","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"分类","date":"2019-03-18T06:11:21.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-03-18 14:11:21\ntype: categories\n---","updated":"2021-12-09T07:41:13.790Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwynjyma0000ytgl54hzg0ac","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"ES 操作简单总结","date":"2020-05-26T06:12:57.000Z","_content":"\n# ES 操作简单总结\n\n## 一 简述\n\n> 此篇总结基于在当前最新版本(7.15.2)\n>\n> ES的result API 分为不同的请求类型对应不同操作\n\n### PUT \n\n​\t/index_name 创建/修改索引\n\n​\t/index_name/_doc/{id} 创建文档  —创建不指定id,则默认随机\n\nPOST\n\n​\t/index_name/_doc/{id} 创建/修改文档\n\nDELETE \n\n​\t删除索引或者文档\n\nGET\n\n​\t查询/获取文档(指定id)","source":"_posts/ES 操作简单总结.md","raw":"---\ntitle: ES 操作简单总结\ndate: 2020-05-26 14:12:57\ncategories:\n    - 后端\ntags:\n    - elasticsearch\n---\n\n# ES 操作简单总结\n\n## 一 简述\n\n> 此篇总结基于在当前最新版本(7.15.2)\n>\n> ES的result API 分为不同的请求类型对应不同操作\n\n### PUT \n\n​\t/index_name 创建/修改索引\n\n​\t/index_name/_doc/{id} 创建文档  —创建不指定id,则默认随机\n\nPOST\n\n​\t/index_name/_doc/{id} 创建/修改文档\n\nDELETE \n\n​\t删除索引或者文档\n\nGET\n\n​\t查询/获取文档(指定id)","slug":"ES 操作简单总结","published":1,"updated":"2021-12-09T07:30:40.779Z","_id":"ckwymfa7t0000gbgle1dy5gm0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ES-操作简单总结\"><a href=\"#ES-操作简单总结\" class=\"headerlink\" title=\"ES 操作简单总结\"></a>ES 操作简单总结</h1><h2 id=\"一-简述\"><a href=\"#一-简述\" class=\"headerlink\" title=\"一 简述\"></a>一 简述</h2><blockquote>\n<p>此篇总结基于在当前最新版本(7.15.2)</p>\n<p>ES的result API 分为不同的请求类型对应不同操作</p>\n</blockquote>\n<h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><p>​    /index_name 创建/修改索引</p>\n<p>​    /index_name/_doc/{id} 创建文档  —创建不指定id,则默认随机</p>\n<p>POST</p>\n<p>​    /index_name/_doc/{id} 创建/修改文档</p>\n<p>DELETE </p>\n<p>​    删除索引或者文档</p>\n<p>GET</p>\n<p>​    查询/获取文档(指定id)</p>\n","site":{"data":{}},"wordcount":186,"excerpt":"","more":"<h1 id=\"ES-操作简单总结\"><a href=\"#ES-操作简单总结\" class=\"headerlink\" title=\"ES 操作简单总结\"></a>ES 操作简单总结</h1><h2 id=\"一-简述\"><a href=\"#一-简述\" class=\"headerlink\" title=\"一 简述\"></a>一 简述</h2><blockquote>\n<p>此篇总结基于在当前最新版本(7.15.2)</p>\n<p>ES的result API 分为不同的请求类型对应不同操作</p>\n</blockquote>\n<h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><p>​    /index_name 创建/修改索引</p>\n<p>​    /index_name/_doc/{id} 创建文档  —创建不指定id,则默认随机</p>\n<p>POST</p>\n<p>​    /index_name/_doc/{id} 创建/修改文档</p>\n<p>DELETE </p>\n<p>​    删除索引或者文档</p>\n<p>GET</p>\n<p>​    查询/获取文档(指定id)</p>\n"},{"title":"WireGuard 服务建记录","date":"2019-08-11T01:12:57.000Z","_content":"\n# WireGuard 服务建记录\n\n## 环境\n\n```\n系统:Debian 10\n默认内核:linux-headers-4.19.0-14-amd64\n```\n\n## 准备工作\n\n```shell\n# 查看当前内核版本\nuname -r\n# 安装过程需要的软件包(已装跳过)\nsudo apt update\nsudo apt install apt-transport-https vim -y\n# 搜索内核\nsudo apt search linux-image\n# 安装5.10\nsudo apt-get install linux-image-5.10.0-0.bpo.9-amd64\n# 卸载原来的内核\nsudo apt-get remove linux-headers-4.19.0-14-amd64\n# 重启\nsudo reboot\n```\n\n## 安装WireGuard服务端\n\n```shell\n# 添加backports 源\nsudo sh -c \"echo 'deb https://deb.debian.org/debian buster-backports main contrib non-free' > /etc/apt/sources.list.d/buster-backports.list\"\n\n# 安装软件包\nsudo apt update\nsudo apt -t buster-backports install wireguard -y\n\n# 配置服务端\ncd /etc/wireguard\numask 077\n## 生成配置需要的密钥和公钥\nwg genkey | tee privatekey | wg pubkey > publickey\n## 编辑服务端配置文件 ， 内容如下\nsudo vim /etc/wireguard/wg0.conf\n\t\n```\n\n### \t服务端配置文件内容\n\n```\n[Interface]\n# wireguard 内网服务器地址\nAddress = 192.168.5.1/32\nSaveConfig = true\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n# wireguard 监听端口\nListenPort = 12345 \n# wireguard 生成的服务端密钥\nPrivateKey = KDGU6q5EG2Pv1ayJHIqAlmG2hGklF9fJ0ZGCp09GJXk=\n```\n\n### 防火墙配置\n\n```shell\nsudo ufw allow 12345/udp\n```\n\n### 服务启停\n\n```shell\nsudo systemctl enable wg-quick@wg0\n\nsudo systemctl start wg-quick@wg0\n\nsudo systemctl status wg-quick@wg0\n\nsudo systemctl stop wg-quick@wg0\n```\n\n### 启动成功后查看\n\n```shell\nsudo wg\n\nsudo ip a show wg0\n```\n\n## 客户端安装（Debian）\n\n### \twireguard安装\n\n​\t\t等同服务端软件包安装\t\n\n### \t客户端配置\n\n```\n[Interface]\nPrivateKey = 客户端私钥\nAddress = 192.168.5.2/32\nDNS = 192.168.5.1\n \n[Peer]\nPublicKey = 服务端公钥\nAllowedIPs = 0.0.0.0/0\nEndpoint = 服务端外网ip:服务端配置监听端口\n\n```\n\n### \t增加服务端配置\n\n```\n[Peer]\nPublicKey = 客户端公钥\nAllowedIPs = 192.168.5.2/32\n```\n\n## Enjoy～","source":"_posts/WireGuard 服务建记录.md","raw":"\n---\ntitle: WireGuard 服务建记录\ndate: 2019-08-11 09:12:57\ncategories:\n    - linux\ntags:\n    - linux\n    - WireGuard\n    - VPN\n---\n\n# WireGuard 服务建记录\n\n## 环境\n\n```\n系统:Debian 10\n默认内核:linux-headers-4.19.0-14-amd64\n```\n\n## 准备工作\n\n```shell\n# 查看当前内核版本\nuname -r\n# 安装过程需要的软件包(已装跳过)\nsudo apt update\nsudo apt install apt-transport-https vim -y\n# 搜索内核\nsudo apt search linux-image\n# 安装5.10\nsudo apt-get install linux-image-5.10.0-0.bpo.9-amd64\n# 卸载原来的内核\nsudo apt-get remove linux-headers-4.19.0-14-amd64\n# 重启\nsudo reboot\n```\n\n## 安装WireGuard服务端\n\n```shell\n# 添加backports 源\nsudo sh -c \"echo 'deb https://deb.debian.org/debian buster-backports main contrib non-free' > /etc/apt/sources.list.d/buster-backports.list\"\n\n# 安装软件包\nsudo apt update\nsudo apt -t buster-backports install wireguard -y\n\n# 配置服务端\ncd /etc/wireguard\numask 077\n## 生成配置需要的密钥和公钥\nwg genkey | tee privatekey | wg pubkey > publickey\n## 编辑服务端配置文件 ， 内容如下\nsudo vim /etc/wireguard/wg0.conf\n\t\n```\n\n### \t服务端配置文件内容\n\n```\n[Interface]\n# wireguard 内网服务器地址\nAddress = 192.168.5.1/32\nSaveConfig = true\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n# wireguard 监听端口\nListenPort = 12345 \n# wireguard 生成的服务端密钥\nPrivateKey = KDGU6q5EG2Pv1ayJHIqAlmG2hGklF9fJ0ZGCp09GJXk=\n```\n\n### 防火墙配置\n\n```shell\nsudo ufw allow 12345/udp\n```\n\n### 服务启停\n\n```shell\nsudo systemctl enable wg-quick@wg0\n\nsudo systemctl start wg-quick@wg0\n\nsudo systemctl status wg-quick@wg0\n\nsudo systemctl stop wg-quick@wg0\n```\n\n### 启动成功后查看\n\n```shell\nsudo wg\n\nsudo ip a show wg0\n```\n\n## 客户端安装（Debian）\n\n### \twireguard安装\n\n​\t\t等同服务端软件包安装\t\n\n### \t客户端配置\n\n```\n[Interface]\nPrivateKey = 客户端私钥\nAddress = 192.168.5.2/32\nDNS = 192.168.5.1\n \n[Peer]\nPublicKey = 服务端公钥\nAllowedIPs = 0.0.0.0/0\nEndpoint = 服务端外网ip:服务端配置监听端口\n\n```\n\n### \t增加服务端配置\n\n```\n[Peer]\nPublicKey = 客户端公钥\nAllowedIPs = 192.168.5.2/32\n```\n\n## Enjoy～","slug":"WireGuard 服务建记录","published":1,"updated":"2021-12-09T07:32:22.476Z","_id":"ckwymfa800002gbgla9o79pmc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"WireGuard-服务建记录\"><a href=\"#WireGuard-服务建记录\" class=\"headerlink\" title=\"WireGuard 服务建记录\"></a>WireGuard 服务建记录</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">系统<span class=\"hljs-symbol\">:Debian</span> <span class=\"hljs-number\">10</span><br>默认内核<span class=\"hljs-symbol\">:linux-headers-</span><span class=\"hljs-number\">4.19</span>.0<span class=\"hljs-number\">-14</span>-amd64<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前内核版本</span><br>uname -r<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装过程需要的软件包(已装跳过)</span><br>sudo apt update<br>sudo apt install apt-transport-https vim -y<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 搜索内核</span><br>sudo apt search linux-image<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装5.10</span><br>sudo apt-get install linux-image-5.10.0-0.bpo.9-amd64<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 卸载原来的内核</span><br>sudo apt-get remove linux-headers-4.19.0-14-amd64<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 重启</span><br>sudo reboot<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装WireGuard服务端\"><a href=\"#安装WireGuard服务端\" class=\"headerlink\" title=\"安装WireGuard服务端\"></a>安装WireGuard服务端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加backports 源</span><br>sudo sh -c &quot;echo &#x27;deb https://deb.debian.org/debian buster-backports main contrib non-free&#x27; &gt; /etc/apt/sources.list.d/buster-backports.list&quot;<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装软件包</span><br>sudo apt update<br>sudo apt -t buster-backports install wireguard -y<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 配置服务端</span><br>cd /etc/wireguard<br>umask 077<br><span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-comment\"># 生成配置需要的密钥和公钥</span></span><br>wg genkey | tee privatekey | wg pubkey &gt; publickey<br><span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-comment\"># 编辑服务端配置文件 ， 内容如下</span></span><br>sudo vim /etc/wireguard/wg0.conf<br>\t<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"服务端配置文件内容\"><a href=\"#服务端配置文件内容\" class=\"headerlink\" title=\"服务端配置文件内容\"></a>服务端配置文件内容</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Interface]</span><br><span class=\"hljs-comment\"># wireguard 内网服务器地址</span><br><span class=\"hljs-attr\">Address</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.1</span>/<span class=\"hljs-number\">32</span><br><span class=\"hljs-attr\">SaveConfig</span> = <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">PostUp</span> = iptables -A FORWARD -i wg0 -j ACCEPT<span class=\"hljs-comment\">; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"hljs-attr\">PostDown</span> = iptables -D FORWARD -i wg0 -j ACCEPT<span class=\"hljs-comment\">; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"hljs-comment\"># wireguard 监听端口</span><br><span class=\"hljs-attr\">ListenPort</span> = <span class=\"hljs-number\">12345</span> <br><span class=\"hljs-comment\"># wireguard 生成的服务端密钥</span><br><span class=\"hljs-attr\">PrivateKey</span> = KDGU6q5EG2Pv1ayJHIqAlmG2hGklF9fJ0ZGCp09GJXk=<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"防火墙配置\"><a href=\"#防火墙配置\" class=\"headerlink\" title=\"防火墙配置\"></a>防火墙配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo ufw allow 12345/udp<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"服务启停\"><a href=\"#服务启停\" class=\"headerlink\" title=\"服务启停\"></a>服务启停</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl enable wg-quick@wg0<br><br>sudo systemctl start wg-quick@wg0<br><br>sudo systemctl status wg-quick@wg0<br><br>sudo systemctl stop wg-quick@wg0<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动成功后查看\"><a href=\"#启动成功后查看\" class=\"headerlink\" title=\"启动成功后查看\"></a>启动成功后查看</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo wg<br><br>sudo ip a show wg0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"客户端安装（Debian）\"><a href=\"#客户端安装（Debian）\" class=\"headerlink\" title=\"客户端安装（Debian）\"></a>客户端安装（Debian）</h2><h3 id=\"wireguard安装\"><a href=\"#wireguard安装\" class=\"headerlink\" title=\"wireguard安装\"></a>wireguard安装</h3><p>​        等同服务端软件包安装    </p>\n<h3 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Interface]</span><br><span class=\"hljs-attr\">PrivateKey</span> = 客户端私钥<br><span class=\"hljs-attr\">Address</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.2</span>/<span class=\"hljs-number\">32</span><br><span class=\"hljs-attr\">DNS</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.1</span><br> <br><span class=\"hljs-section\">[Peer]</span><br><span class=\"hljs-attr\">PublicKey</span> = 服务端公钥<br><span class=\"hljs-attr\">AllowedIPs</span> = <span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span>/<span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">Endpoint</span> = 服务端外网ip:服务端配置监听端口<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"增加服务端配置\"><a href=\"#增加服务端配置\" class=\"headerlink\" title=\"增加服务端配置\"></a>增加服务端配置</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Peer]</span><br><span class=\"hljs-attr\">PublicKey</span> = 客户端公钥<br><span class=\"hljs-attr\">AllowedIPs</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.2</span>/<span class=\"hljs-number\">32</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Enjoy～\"><a href=\"#Enjoy～\" class=\"headerlink\" title=\"Enjoy～\"></a>Enjoy～</h2>","site":{"data":{}},"wordcount":1504,"excerpt":"","more":"<h1 id=\"WireGuard-服务建记录\"><a href=\"#WireGuard-服务建记录\" class=\"headerlink\" title=\"WireGuard 服务建记录\"></a>WireGuard 服务建记录</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">系统<span class=\"hljs-symbol\">:Debian</span> <span class=\"hljs-number\">10</span><br>默认内核<span class=\"hljs-symbol\">:linux-headers-</span><span class=\"hljs-number\">4.19</span>.0<span class=\"hljs-number\">-14</span>-amd64<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前内核版本</span><br>uname -r<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装过程需要的软件包(已装跳过)</span><br>sudo apt update<br>sudo apt install apt-transport-https vim -y<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 搜索内核</span><br>sudo apt search linux-image<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装5.10</span><br>sudo apt-get install linux-image-5.10.0-0.bpo.9-amd64<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 卸载原来的内核</span><br>sudo apt-get remove linux-headers-4.19.0-14-amd64<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 重启</span><br>sudo reboot<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装WireGuard服务端\"><a href=\"#安装WireGuard服务端\" class=\"headerlink\" title=\"安装WireGuard服务端\"></a>安装WireGuard服务端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加backports 源</span><br>sudo sh -c &quot;echo &#x27;deb https://deb.debian.org/debian buster-backports main contrib non-free&#x27; &gt; /etc/apt/sources.list.d/buster-backports.list&quot;<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装软件包</span><br>sudo apt update<br>sudo apt -t buster-backports install wireguard -y<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 配置服务端</span><br>cd /etc/wireguard<br>umask 077<br><span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-comment\"># 生成配置需要的密钥和公钥</span></span><br>wg genkey | tee privatekey | wg pubkey &gt; publickey<br><span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-comment\"># 编辑服务端配置文件 ， 内容如下</span></span><br>sudo vim /etc/wireguard/wg0.conf<br>\t<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"服务端配置文件内容\"><a href=\"#服务端配置文件内容\" class=\"headerlink\" title=\"服务端配置文件内容\"></a>服务端配置文件内容</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Interface]</span><br><span class=\"hljs-comment\"># wireguard 内网服务器地址</span><br><span class=\"hljs-attr\">Address</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.1</span>/<span class=\"hljs-number\">32</span><br><span class=\"hljs-attr\">SaveConfig</span> = <span class=\"hljs-literal\">true</span><br><span class=\"hljs-attr\">PostUp</span> = iptables -A FORWARD -i wg0 -j ACCEPT<span class=\"hljs-comment\">; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"hljs-attr\">PostDown</span> = iptables -D FORWARD -i wg0 -j ACCEPT<span class=\"hljs-comment\">; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"hljs-comment\"># wireguard 监听端口</span><br><span class=\"hljs-attr\">ListenPort</span> = <span class=\"hljs-number\">12345</span> <br><span class=\"hljs-comment\"># wireguard 生成的服务端密钥</span><br><span class=\"hljs-attr\">PrivateKey</span> = KDGU6q5EG2Pv1ayJHIqAlmG2hGklF9fJ0ZGCp09GJXk=<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"防火墙配置\"><a href=\"#防火墙配置\" class=\"headerlink\" title=\"防火墙配置\"></a>防火墙配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo ufw allow 12345/udp<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"服务启停\"><a href=\"#服务启停\" class=\"headerlink\" title=\"服务启停\"></a>服务启停</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl enable wg-quick@wg0<br><br>sudo systemctl start wg-quick@wg0<br><br>sudo systemctl status wg-quick@wg0<br><br>sudo systemctl stop wg-quick@wg0<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动成功后查看\"><a href=\"#启动成功后查看\" class=\"headerlink\" title=\"启动成功后查看\"></a>启动成功后查看</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo wg<br><br>sudo ip a show wg0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"客户端安装（Debian）\"><a href=\"#客户端安装（Debian）\" class=\"headerlink\" title=\"客户端安装（Debian）\"></a>客户端安装（Debian）</h2><h3 id=\"wireguard安装\"><a href=\"#wireguard安装\" class=\"headerlink\" title=\"wireguard安装\"></a>wireguard安装</h3><p>​        等同服务端软件包安装    </p>\n<h3 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Interface]</span><br><span class=\"hljs-attr\">PrivateKey</span> = 客户端私钥<br><span class=\"hljs-attr\">Address</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.2</span>/<span class=\"hljs-number\">32</span><br><span class=\"hljs-attr\">DNS</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.1</span><br> <br><span class=\"hljs-section\">[Peer]</span><br><span class=\"hljs-attr\">PublicKey</span> = 服务端公钥<br><span class=\"hljs-attr\">AllowedIPs</span> = <span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span>/<span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">Endpoint</span> = 服务端外网ip:服务端配置监听端口<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"增加服务端配置\"><a href=\"#增加服务端配置\" class=\"headerlink\" title=\"增加服务端配置\"></a>增加服务端配置</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Peer]</span><br><span class=\"hljs-attr\">PublicKey</span> = 客户端公钥<br><span class=\"hljs-attr\">AllowedIPs</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">5.2</span>/<span class=\"hljs-number\">32</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Enjoy～\"><a href=\"#Enjoy～\" class=\"headerlink\" title=\"Enjoy～\"></a>Enjoy～</h2>"},{"title":"关于数据序列化的小结","date":"2020-06-09T11:28:56.000Z","_content":"\n\n### 关于数据序列化的小结\n\n不同系统间的数据交换可以通过基于文本的例如XML、JSON等，而在Java进程间的交换数据，通常就是通过序列化，本文为序列化相关优化总结。\n\n> “JDK 提供了默认的序列化对象机制，以实现 Serializable 或 Externalizable 接口。实际上，默认序列化的性能还有提升的空间，但此时进行过早的优化的确不太明智。特定的序列化和反序列化代码需要很多时间编写，而且也比默认的序列化代码更难维护。编写正确的序列化代码会有一些棘手，试图优化代码也会增加出错的风险。”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”  \n\n\n\n#### 1.transient字段\n\n​\t一般情况下，对象内属性越少，序列化的性能改进代价就越小。将字段标记为transient，默认该字段就不会序列化了。\n\n> 文中代码皆引自《Java性能权威指南》\n\n```java\npublic class StockPriceHistoryImpl implements StockPriceHistory {\n    private String symbol;\n    protected SortedMap<Date, StockPrice> prices = new TreeMap<>();\n    protected Date firstDate;\n    protected Date lastDate;\n    protected boolean needsCalc = true;\n    protected BigDecimal highPrice;\n    protected BigDecimal lowPrice;\n    protected BigDecimal averagePrice;\n    protected BigDecimal stdDev;\n    private Map<BigDecimal, ArrayList<Date>> histogram;\n    ....\n    public StockPriceHistoryImpl(String s, Date firstDate, Date lastDate) {\n        prices = ....\n    }\n}\n```\n\n​\t在上述代码当中，存在着一种延迟加载的情况，当构造此StockPriceHistoryImpl对象时，会创建类型为SortedMap的对象prices，而当调用字段的getter方法时 才会去计算该字段的实际值（lazy）,此类情况下，在满足业务需求的前提下，就可以给延迟加载的字段增加 transient标记 ，优化性能。\n\n#### 2.覆盖默认的序列化\n\n```java\npublic class Point implements Serializable {\n    private transient int x;\n    private transient int y;\n    ....\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n        oos.writeInt(x);\n        oos.writeInt(y);\n    }\n    private void readObject(ObjectInputStream ois)\n                                throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n        x = ois.readInt();\n        y = ois.readInt();\n    }\n}\n```\n\n> 以上代码中的writeObject为序列化时调用 ， readObject为反序列化时调用\n\n针对不同场景，可以考虑重写方法体覆盖对应调用，以优化序列化/反序列化性能。\n\n\n\n#### 3.压缩序列化数据\n\n```java\npublic class StockPriceHistoryCompress\n        implements StockPriceHistory, Serializable {\n\n    private byte[] zippedPrices;\n    private transient SortedMap<Date, StockPrice> prices;\n\n    private void writeObject(ObjectOutputStream out)\n                throws IOException {\n        if (zippedPrices == null) {\n            makeZippedPrices();\n        }\n        out.defaultWriteObject();\n    }\n\n    private void readObject(ObjectInputStream in)\n                throws IOException,  ClassNotFoundException {\n        in.defaultReadObject();\n        unzipPrices();\n    }\n\n    protected void makeZippedPrices() throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        GZIPOutputStream zip = new GZIPOutputStream(baos);\n        ObjectOutputStream oos = new ObjectOutputStream(\n                new BufferedOutputStream(zip));\n        oos.writeObject(prices);\n        oos.close();\n        zip.close();\n        zippedPrices = baos.toByteArray();\n    }\n\n    protected void unzipPrices()\n                throws IOException, ClassNotFoundException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(zippedPrices);\n        GZIPInputStream zip = new GZIPInputStream(bais);\n        ObjectInputStream ois = new ObjectInputStream(\n                new BufferedInputStream(zip));\n        prices = (SortedMap<Date, StockPrice>) ois.readObject();\n        ois.close();\n        zip.close();\n    }\n}\n```\n\n以上代码中示例，在数据序列化之后进行压缩处理，使得在网络中传输更快，以达到性能优化效果。\n\n#### 4.追踪对象复制\n\n![image-20211206150055240](/Users/xuxiuhong/Library/Application Support/typora-user-images/image-20211206150055240.png)\n\n> 上图是一个简化版本的 map。JVM 默认先序列化 Node A 的原生数据字段，然后递归调用 Node B 的 writeObject()（接着是 Node C）。Node B 也会序列化它自己的原生数据字段，然后递归序列化它上级 Node 的字段。\n>\n> 但是请注意——Node B 上级节点 Node A 已经被序列化，怎么办？对象序列化的代码很智能：它会意识到这一点，并且不会再次序列化 Node A 的数据。相反，它只会在先前序列化的数据中添加一个对象引用。\n>\n> 追踪上一级对象从而递归所有对象，会对序列化的性能有少许影响。但正如 Point 数组的例子所示，这是无法避免的：必须追踪上一级序列化的对象以便正确恢复对象引用。不过，可以通过压缩对象引用来进行智能优化，从而在对象反序列化时易于重建。\n>\n> 不同的集类处理这个问题的方式有所不同。比如 TreeMap，它只是遍历树然后序列化键值，丢弃了键之间的所有关系（也就是它们的排列顺序）。在反序列化时，readObject() 会重新排列数据并生成树。虽然排序对象听起来代价很昂贵，但实际并非如此：对 10 000 只股票而言，整个过程要比默认的序列化快 20%，默认机制需要追踪所有的对象引用。\n\n","source":"_posts/关于数据序列化的小结.md","raw":"\n---\ntitle: 关于数据序列化的小结\ndate: 2020-06-09 19:28:56\ncategories:\n    - 后端\ntags:\n    - 序列化\n---\n\n\n### 关于数据序列化的小结\n\n不同系统间的数据交换可以通过基于文本的例如XML、JSON等，而在Java进程间的交换数据，通常就是通过序列化，本文为序列化相关优化总结。\n\n> “JDK 提供了默认的序列化对象机制，以实现 Serializable 或 Externalizable 接口。实际上，默认序列化的性能还有提升的空间，但此时进行过早的优化的确不太明智。特定的序列化和反序列化代码需要很多时间编写，而且也比默认的序列化代码更难维护。编写正确的序列化代码会有一些棘手，试图优化代码也会增加出错的风险。”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”  \n\n\n\n#### 1.transient字段\n\n​\t一般情况下，对象内属性越少，序列化的性能改进代价就越小。将字段标记为transient，默认该字段就不会序列化了。\n\n> 文中代码皆引自《Java性能权威指南》\n\n```java\npublic class StockPriceHistoryImpl implements StockPriceHistory {\n    private String symbol;\n    protected SortedMap<Date, StockPrice> prices = new TreeMap<>();\n    protected Date firstDate;\n    protected Date lastDate;\n    protected boolean needsCalc = true;\n    protected BigDecimal highPrice;\n    protected BigDecimal lowPrice;\n    protected BigDecimal averagePrice;\n    protected BigDecimal stdDev;\n    private Map<BigDecimal, ArrayList<Date>> histogram;\n    ....\n    public StockPriceHistoryImpl(String s, Date firstDate, Date lastDate) {\n        prices = ....\n    }\n}\n```\n\n​\t在上述代码当中，存在着一种延迟加载的情况，当构造此StockPriceHistoryImpl对象时，会创建类型为SortedMap的对象prices，而当调用字段的getter方法时 才会去计算该字段的实际值（lazy）,此类情况下，在满足业务需求的前提下，就可以给延迟加载的字段增加 transient标记 ，优化性能。\n\n#### 2.覆盖默认的序列化\n\n```java\npublic class Point implements Serializable {\n    private transient int x;\n    private transient int y;\n    ....\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n        oos.writeInt(x);\n        oos.writeInt(y);\n    }\n    private void readObject(ObjectInputStream ois)\n                                throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n        x = ois.readInt();\n        y = ois.readInt();\n    }\n}\n```\n\n> 以上代码中的writeObject为序列化时调用 ， readObject为反序列化时调用\n\n针对不同场景，可以考虑重写方法体覆盖对应调用，以优化序列化/反序列化性能。\n\n\n\n#### 3.压缩序列化数据\n\n```java\npublic class StockPriceHistoryCompress\n        implements StockPriceHistory, Serializable {\n\n    private byte[] zippedPrices;\n    private transient SortedMap<Date, StockPrice> prices;\n\n    private void writeObject(ObjectOutputStream out)\n                throws IOException {\n        if (zippedPrices == null) {\n            makeZippedPrices();\n        }\n        out.defaultWriteObject();\n    }\n\n    private void readObject(ObjectInputStream in)\n                throws IOException,  ClassNotFoundException {\n        in.defaultReadObject();\n        unzipPrices();\n    }\n\n    protected void makeZippedPrices() throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        GZIPOutputStream zip = new GZIPOutputStream(baos);\n        ObjectOutputStream oos = new ObjectOutputStream(\n                new BufferedOutputStream(zip));\n        oos.writeObject(prices);\n        oos.close();\n        zip.close();\n        zippedPrices = baos.toByteArray();\n    }\n\n    protected void unzipPrices()\n                throws IOException, ClassNotFoundException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(zippedPrices);\n        GZIPInputStream zip = new GZIPInputStream(bais);\n        ObjectInputStream ois = new ObjectInputStream(\n                new BufferedInputStream(zip));\n        prices = (SortedMap<Date, StockPrice>) ois.readObject();\n        ois.close();\n        zip.close();\n    }\n}\n```\n\n以上代码中示例，在数据序列化之后进行压缩处理，使得在网络中传输更快，以达到性能优化效果。\n\n#### 4.追踪对象复制\n\n![image-20211206150055240](/Users/xuxiuhong/Library/Application Support/typora-user-images/image-20211206150055240.png)\n\n> 上图是一个简化版本的 map。JVM 默认先序列化 Node A 的原生数据字段，然后递归调用 Node B 的 writeObject()（接着是 Node C）。Node B 也会序列化它自己的原生数据字段，然后递归序列化它上级 Node 的字段。\n>\n> 但是请注意——Node B 上级节点 Node A 已经被序列化，怎么办？对象序列化的代码很智能：它会意识到这一点，并且不会再次序列化 Node A 的数据。相反，它只会在先前序列化的数据中添加一个对象引用。\n>\n> 追踪上一级对象从而递归所有对象，会对序列化的性能有少许影响。但正如 Point 数组的例子所示，这是无法避免的：必须追踪上一级序列化的对象以便正确恢复对象引用。不过，可以通过压缩对象引用来进行智能优化，从而在对象反序列化时易于重建。\n>\n> 不同的集类处理这个问题的方式有所不同。比如 TreeMap，它只是遍历树然后序列化键值，丢弃了键之间的所有关系（也就是它们的排列顺序）。在反序列化时，readObject() 会重新排列数据并生成树。虽然排序对象听起来代价很昂贵，但实际并非如此：对 10 000 只股票而言，整个过程要比默认的序列化快 20%，默认机制需要追踪所有的对象引用。\n\n","slug":"关于数据序列化的小结","published":1,"updated":"2021-12-09T07:32:44.152Z","_id":"ckwymfa810003gbgl7x7aemm6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"关于数据序列化的小结\"><a href=\"#关于数据序列化的小结\" class=\"headerlink\" title=\"关于数据序列化的小结\"></a>关于数据序列化的小结</h3><p>不同系统间的数据交换可以通过基于文本的例如XML、JSON等，而在Java进程间的交换数据，通常就是通过序列化，本文为序列化相关优化总结。</p>\n<blockquote>\n<p>“JDK 提供了默认的序列化对象机制，以实现 Serializable 或 Externalizable 接口。实际上，默认序列化的性能还有提升的空间，但此时进行过早的优化的确不太明智。特定的序列化和反序列化代码需要很多时间编写，而且也比默认的序列化代码更难维护。编写正确的序列化代码会有一些棘手，试图优化代码也会增加出错的风险。”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”  </p>\n</blockquote>\n<h4 id=\"1-transient字段\"><a href=\"#1-transient字段\" class=\"headerlink\" title=\"1.transient字段\"></a>1.transient字段</h4><p>​    一般情况下，对象内属性越少，序列化的性能改进代价就越小。将字段标记为transient，默认该字段就不会序列化了。</p>\n<blockquote>\n<p>文中代码皆引自《Java性能权威指南》</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StockPriceHistoryImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StockPriceHistory</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String symbol;<br>    <span class=\"hljs-keyword\">protected</span> SortedMap&lt;Date, StockPrice&gt; prices = <span class=\"hljs-keyword\">new</span> TreeMap&lt;&gt;();<br>    <span class=\"hljs-keyword\">protected</span> Date firstDate;<br>    <span class=\"hljs-keyword\">protected</span> Date lastDate;<br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">boolean</span> needsCalc = <span class=\"hljs-keyword\">true</span>;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal highPrice;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal lowPrice;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal averagePrice;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal stdDev;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;BigDecimal, ArrayList&lt;Date&gt;&gt; histogram;<br>    ....<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">StockPriceHistoryImpl</span><span class=\"hljs-params\">(String s, Date firstDate, Date lastDate)</span> </span>&#123;<br>        prices = ....<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​    在上述代码当中，存在着一种延迟加载的情况，当构造此StockPriceHistoryImpl对象时，会创建类型为SortedMap的对象prices，而当调用字段的getter方法时 才会去计算该字段的实际值（lazy）,此类情况下，在满足业务需求的前提下，就可以给延迟加载的字段增加 transient标记 ，优化性能。</p>\n<h4 id=\"2-覆盖默认的序列化\"><a href=\"#2-覆盖默认的序列化\" class=\"headerlink\" title=\"2.覆盖默认的序列化\"></a>2.覆盖默认的序列化</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-keyword\">int</span> x;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-keyword\">int</span> y;<br>    ....<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream oos)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        oos.defaultWriteObject();<br>        oos.writeInt(x);<br>        oos.writeInt(y);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream ois)</span></span><br><span class=\"hljs-function\">                                <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ois.defaultReadObject();<br>        x = ois.readInt();<br>        y = ois.readInt();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上代码中的writeObject为序列化时调用 ， readObject为反序列化时调用</p>\n</blockquote>\n<p>针对不同场景，可以考虑重写方法体覆盖对应调用，以优化序列化/反序列化性能。</p>\n<h4 id=\"3-压缩序列化数据\"><a href=\"#3-压缩序列化数据\" class=\"headerlink\" title=\"3.压缩序列化数据\"></a>3.压缩序列化数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StockPriceHistoryCompress</span></span><br><span class=\"hljs-class\">        <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StockPriceHistory</span>, <span class=\"hljs-title\">Serializable</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">byte</span>[] zippedPrices;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> SortedMap&lt;Date, StockPrice&gt; prices;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream out)</span></span><br><span class=\"hljs-function\">                <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (zippedPrices == <span class=\"hljs-keyword\">null</span>) &#123;<br>            makeZippedPrices();<br>        &#125;<br>        out.defaultWriteObject();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream in)</span></span><br><span class=\"hljs-function\">                <span class=\"hljs-keyword\">throws</span> IOException,  ClassNotFoundException </span>&#123;<br>        in.defaultReadObject();<br>        unzipPrices();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">makeZippedPrices</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        ByteArrayOutputStream baos = <span class=\"hljs-keyword\">new</span> ByteArrayOutputStream();<br>        GZIPOutputStream zip = <span class=\"hljs-keyword\">new</span> GZIPOutputStream(baos);<br>        ObjectOutputStream oos = <span class=\"hljs-keyword\">new</span> ObjectOutputStream(<br>                <span class=\"hljs-keyword\">new</span> BufferedOutputStream(zip));<br>        oos.writeObject(prices);<br>        oos.close();<br>        zip.close();<br>        zippedPrices = baos.toByteArray();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unzipPrices</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">                <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ByteArrayInputStream bais = <span class=\"hljs-keyword\">new</span> ByteArrayInputStream(zippedPrices);<br>        GZIPInputStream zip = <span class=\"hljs-keyword\">new</span> GZIPInputStream(bais);<br>        ObjectInputStream ois = <span class=\"hljs-keyword\">new</span> ObjectInputStream(<br>                <span class=\"hljs-keyword\">new</span> BufferedInputStream(zip));<br>        prices = (SortedMap&lt;Date, StockPrice&gt;) ois.readObject();<br>        ois.close();<br>        zip.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>以上代码中示例，在数据序列化之后进行压缩处理，使得在网络中传输更快，以达到性能优化效果。</p>\n<h4 id=\"4-追踪对象复制\"><a href=\"#4-追踪对象复制\" class=\"headerlink\" title=\"4.追踪对象复制\"></a>4.追踪对象复制</h4><p>![image-20211206150055240](/Users/xuxiuhong/Library/Application Support/typora-user-images/image-20211206150055240.png)</p>\n<blockquote>\n<p>上图是一个简化版本的 map。JVM 默认先序列化 Node A 的原生数据字段，然后递归调用 Node B 的 writeObject()（接着是 Node C）。Node B 也会序列化它自己的原生数据字段，然后递归序列化它上级 Node 的字段。</p>\n<p>但是请注意——Node B 上级节点 Node A 已经被序列化，怎么办？对象序列化的代码很智能：它会意识到这一点，并且不会再次序列化 Node A 的数据。相反，它只会在先前序列化的数据中添加一个对象引用。</p>\n<p>追踪上一级对象从而递归所有对象，会对序列化的性能有少许影响。但正如 Point 数组的例子所示，这是无法避免的：必须追踪上一级序列化的对象以便正确恢复对象引用。不过，可以通过压缩对象引用来进行智能优化，从而在对象反序列化时易于重建。</p>\n<p>不同的集类处理这个问题的方式有所不同。比如 TreeMap，它只是遍历树然后序列化键值，丢弃了键之间的所有关系（也就是它们的排列顺序）。在反序列化时，readObject() 会重新排列数据并生成树。虽然排序对象听起来代价很昂贵，但实际并非如此：对 10 000 只股票而言，整个过程要比默认的序列化快 20%，默认机制需要追踪所有的对象引用。</p>\n</blockquote>\n","site":{"data":{}},"wordcount":3382,"excerpt":"","more":"<h3 id=\"关于数据序列化的小结\"><a href=\"#关于数据序列化的小结\" class=\"headerlink\" title=\"关于数据序列化的小结\"></a>关于数据序列化的小结</h3><p>不同系统间的数据交换可以通过基于文本的例如XML、JSON等，而在Java进程间的交换数据，通常就是通过序列化，本文为序列化相关优化总结。</p>\n<blockquote>\n<p>“JDK 提供了默认的序列化对象机制，以实现 Serializable 或 Externalizable 接口。实际上，默认序列化的性能还有提升的空间，但此时进行过早的优化的确不太明智。特定的序列化和反序列化代码需要很多时间编写，而且也比默认的序列化代码更难维护。编写正确的序列化代码会有一些棘手，试图优化代码也会增加出错的风险。”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”  </p>\n</blockquote>\n<h4 id=\"1-transient字段\"><a href=\"#1-transient字段\" class=\"headerlink\" title=\"1.transient字段\"></a>1.transient字段</h4><p>​    一般情况下，对象内属性越少，序列化的性能改进代价就越小。将字段标记为transient，默认该字段就不会序列化了。</p>\n<blockquote>\n<p>文中代码皆引自《Java性能权威指南》</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StockPriceHistoryImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StockPriceHistory</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String symbol;<br>    <span class=\"hljs-keyword\">protected</span> SortedMap&lt;Date, StockPrice&gt; prices = <span class=\"hljs-keyword\">new</span> TreeMap&lt;&gt;();<br>    <span class=\"hljs-keyword\">protected</span> Date firstDate;<br>    <span class=\"hljs-keyword\">protected</span> Date lastDate;<br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">boolean</span> needsCalc = <span class=\"hljs-keyword\">true</span>;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal highPrice;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal lowPrice;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal averagePrice;<br>    <span class=\"hljs-keyword\">protected</span> BigDecimal stdDev;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;BigDecimal, ArrayList&lt;Date&gt;&gt; histogram;<br>    ....<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">StockPriceHistoryImpl</span><span class=\"hljs-params\">(String s, Date firstDate, Date lastDate)</span> </span>&#123;<br>        prices = ....<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​    在上述代码当中，存在着一种延迟加载的情况，当构造此StockPriceHistoryImpl对象时，会创建类型为SortedMap的对象prices，而当调用字段的getter方法时 才会去计算该字段的实际值（lazy）,此类情况下，在满足业务需求的前提下，就可以给延迟加载的字段增加 transient标记 ，优化性能。</p>\n<h4 id=\"2-覆盖默认的序列化\"><a href=\"#2-覆盖默认的序列化\" class=\"headerlink\" title=\"2.覆盖默认的序列化\"></a>2.覆盖默认的序列化</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-keyword\">int</span> x;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-keyword\">int</span> y;<br>    ....<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream oos)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        oos.defaultWriteObject();<br>        oos.writeInt(x);<br>        oos.writeInt(y);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream ois)</span></span><br><span class=\"hljs-function\">                                <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ois.defaultReadObject();<br>        x = ois.readInt();<br>        y = ois.readInt();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上代码中的writeObject为序列化时调用 ， readObject为反序列化时调用</p>\n</blockquote>\n<p>针对不同场景，可以考虑重写方法体覆盖对应调用，以优化序列化/反序列化性能。</p>\n<h4 id=\"3-压缩序列化数据\"><a href=\"#3-压缩序列化数据\" class=\"headerlink\" title=\"3.压缩序列化数据\"></a>3.压缩序列化数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StockPriceHistoryCompress</span></span><br><span class=\"hljs-class\">        <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StockPriceHistory</span>, <span class=\"hljs-title\">Serializable</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">byte</span>[] zippedPrices;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> SortedMap&lt;Date, StockPrice&gt; prices;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream out)</span></span><br><span class=\"hljs-function\">                <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (zippedPrices == <span class=\"hljs-keyword\">null</span>) &#123;<br>            makeZippedPrices();<br>        &#125;<br>        out.defaultWriteObject();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream in)</span></span><br><span class=\"hljs-function\">                <span class=\"hljs-keyword\">throws</span> IOException,  ClassNotFoundException </span>&#123;<br>        in.defaultReadObject();<br>        unzipPrices();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">makeZippedPrices</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        ByteArrayOutputStream baos = <span class=\"hljs-keyword\">new</span> ByteArrayOutputStream();<br>        GZIPOutputStream zip = <span class=\"hljs-keyword\">new</span> GZIPOutputStream(baos);<br>        ObjectOutputStream oos = <span class=\"hljs-keyword\">new</span> ObjectOutputStream(<br>                <span class=\"hljs-keyword\">new</span> BufferedOutputStream(zip));<br>        oos.writeObject(prices);<br>        oos.close();<br>        zip.close();<br>        zippedPrices = baos.toByteArray();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unzipPrices</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">                <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ByteArrayInputStream bais = <span class=\"hljs-keyword\">new</span> ByteArrayInputStream(zippedPrices);<br>        GZIPInputStream zip = <span class=\"hljs-keyword\">new</span> GZIPInputStream(bais);<br>        ObjectInputStream ois = <span class=\"hljs-keyword\">new</span> ObjectInputStream(<br>                <span class=\"hljs-keyword\">new</span> BufferedInputStream(zip));<br>        prices = (SortedMap&lt;Date, StockPrice&gt;) ois.readObject();<br>        ois.close();<br>        zip.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>以上代码中示例，在数据序列化之后进行压缩处理，使得在网络中传输更快，以达到性能优化效果。</p>\n<h4 id=\"4-追踪对象复制\"><a href=\"#4-追踪对象复制\" class=\"headerlink\" title=\"4.追踪对象复制\"></a>4.追踪对象复制</h4><p>![image-20211206150055240](/Users/xuxiuhong/Library/Application Support/typora-user-images/image-20211206150055240.png)</p>\n<blockquote>\n<p>上图是一个简化版本的 map。JVM 默认先序列化 Node A 的原生数据字段，然后递归调用 Node B 的 writeObject()（接着是 Node C）。Node B 也会序列化它自己的原生数据字段，然后递归序列化它上级 Node 的字段。</p>\n<p>但是请注意——Node B 上级节点 Node A 已经被序列化，怎么办？对象序列化的代码很智能：它会意识到这一点，并且不会再次序列化 Node A 的数据。相反，它只会在先前序列化的数据中添加一个对象引用。</p>\n<p>追踪上一级对象从而递归所有对象，会对序列化的性能有少许影响。但正如 Point 数组的例子所示，这是无法避免的：必须追踪上一级序列化的对象以便正确恢复对象引用。不过，可以通过压缩对象引用来进行智能优化，从而在对象反序列化时易于重建。</p>\n<p>不同的集类处理这个问题的方式有所不同。比如 TreeMap，它只是遍历树然后序列化键值，丢弃了键之间的所有关系（也就是它们的排列顺序）。在反序列化时，readObject() 会重新排列数据并生成树。虽然排序对象听起来代价很昂贵，但实际并非如此：对 10 000 只股票而言，整个过程要比默认的序列化快 20%，默认机制需要追踪所有的对象引用。</p>\n</blockquote>\n"},{"title":"关于垃圾收集器","date":"2020-10-09T09:31:56.000Z","_content":"\n\n### 垃圾收集器\n\n> 现代 JVM 的类型繁多，最主流的四个垃圾收集器分别是：Serial 收集器（常用于单 CPU 环境）、Throughput（或者 Parallel）收集器、Concurrent 收集器（CMS）和 G1 收集器。\n>\n> \n\n#### 1.分代收集器\n\n> “虽然实现的细节千差万别，但所有的垃圾收集器都遵循了同一个方式，即根据情况将堆划分成不同的代（Generation）。这些代被称为“老年代”（Old Generation 或 Tenured Generation）和“新生代”（Young Generation）。新生代又被进一步地划分为不同的区段，分别称为 Eden 空间和 Survivor 空间（不过 Eden 有时会被错误地用于指代整个新生代）。”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” Apple Books. \n\n在Java程序当中，垃圾回收大部分处理的都是临时对象，这些临时对象所在的位置就是划分的新生代区域。\n\n新生代填满时，垃圾收集器会暂停所有的应用线程，回收新生代空间。不再使用的对象会被回收，仍然在使用的对象会被移动到其他地方。这种操作被称为 **Minor GC**。\n\n在垃圾收集器回收对象整理对象时，对象的引用地址会发生改变，因此此时需确保应用线程不再继续使用这些对象，这段停顿时间被称为 **时空停顿（stop-the-world）**。通常来说，这个停顿时间对应用的性能影响最大，减少时空停顿是调优的关键考量。\n\n当对象不断从新生代移动到老年代，最终老年代被填满之后，JVM就需要找出老年代中不再使用的对象，并对他们进行回收。简单的垃圾收集算法直接停掉所有应用线程，找出不再使用的对象，进行回收及空间整理，这个过程称为 **Full GC** ，这会导致应用程序长时间的停顿。\n\n针对这种情况，也诞生了一些<u>无停顿的收集器</u>，例如CMS和G1收集器，此类收集器通过复杂的算法，可以在应用程序保持运行的同时找出不再使用的对象。此类收集器被称为**Concurrent收集器** 或 **低停顿收集器（Low Pause）**\n\n|            收集器            |                             简述                             |\n| :--------------------------: | :----------------------------------------------------------: |\n|         Serial收集器         | 最简单的收集器，单线程，无论进行Minor GC 还是Full GC ，清理空间时，都会导致<u>时空停顿</u><br />**-XX:+UseSerialGC** |\n| Throughput收集器（Parallel） | 大多数场景默认的垃圾收集器，多线程，性能明显优于serial<br />**-XX:+UseParallelGC** |\n|          CMS收集器           | Minor GC会暂停应用线程，多线程回收，算法标识<br />**-XX:+UseParNewGC**<br />Full GC不再暂停应用线程，而是采用多线程定期对老年代扫描回收，消耗额外的CPU资源，且堆变得过度碎片化时会直接采用serial收集方式，产生时空停顿 |\n|           G1收集器           | 设计初衷是为了尽量缩短处理超大堆（大于 4 GB）时产生的停顿<br />Minor GC处理方式同CMS，<br />老年代空间划分为不同区域，垃圾回收处理方式为复制整理，正常情况下不易产生碎片化<br />不过仍属于concurrent收集器，会额外消耗CPU资源 |\n\n","source":"_posts/垃圾收集器.md","raw":"\n---\ntitle: 关于垃圾收集器\ndate: 2020-10-09 17:31:56\ncategories:\n    - 后端\ntags:\n    - 垃圾收集器\n    - JVM\n---\n\n\n### 垃圾收集器\n\n> 现代 JVM 的类型繁多，最主流的四个垃圾收集器分别是：Serial 收集器（常用于单 CPU 环境）、Throughput（或者 Parallel）收集器、Concurrent 收集器（CMS）和 G1 收集器。\n>\n> \n\n#### 1.分代收集器\n\n> “虽然实现的细节千差万别，但所有的垃圾收集器都遵循了同一个方式，即根据情况将堆划分成不同的代（Generation）。这些代被称为“老年代”（Old Generation 或 Tenured Generation）和“新生代”（Young Generation）。新生代又被进一步地划分为不同的区段，分别称为 Eden 空间和 Survivor 空间（不过 Eden 有时会被错误地用于指代整个新生代）。”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” Apple Books. \n\n在Java程序当中，垃圾回收大部分处理的都是临时对象，这些临时对象所在的位置就是划分的新生代区域。\n\n新生代填满时，垃圾收集器会暂停所有的应用线程，回收新生代空间。不再使用的对象会被回收，仍然在使用的对象会被移动到其他地方。这种操作被称为 **Minor GC**。\n\n在垃圾收集器回收对象整理对象时，对象的引用地址会发生改变，因此此时需确保应用线程不再继续使用这些对象，这段停顿时间被称为 **时空停顿（stop-the-world）**。通常来说，这个停顿时间对应用的性能影响最大，减少时空停顿是调优的关键考量。\n\n当对象不断从新生代移动到老年代，最终老年代被填满之后，JVM就需要找出老年代中不再使用的对象，并对他们进行回收。简单的垃圾收集算法直接停掉所有应用线程，找出不再使用的对象，进行回收及空间整理，这个过程称为 **Full GC** ，这会导致应用程序长时间的停顿。\n\n针对这种情况，也诞生了一些<u>无停顿的收集器</u>，例如CMS和G1收集器，此类收集器通过复杂的算法，可以在应用程序保持运行的同时找出不再使用的对象。此类收集器被称为**Concurrent收集器** 或 **低停顿收集器（Low Pause）**\n\n|            收集器            |                             简述                             |\n| :--------------------------: | :----------------------------------------------------------: |\n|         Serial收集器         | 最简单的收集器，单线程，无论进行Minor GC 还是Full GC ，清理空间时，都会导致<u>时空停顿</u><br />**-XX:+UseSerialGC** |\n| Throughput收集器（Parallel） | 大多数场景默认的垃圾收集器，多线程，性能明显优于serial<br />**-XX:+UseParallelGC** |\n|          CMS收集器           | Minor GC会暂停应用线程，多线程回收，算法标识<br />**-XX:+UseParNewGC**<br />Full GC不再暂停应用线程，而是采用多线程定期对老年代扫描回收，消耗额外的CPU资源，且堆变得过度碎片化时会直接采用serial收集方式，产生时空停顿 |\n|           G1收集器           | 设计初衷是为了尽量缩短处理超大堆（大于 4 GB）时产生的停顿<br />Minor GC处理方式同CMS，<br />老年代空间划分为不同区域，垃圾回收处理方式为复制整理，正常情况下不易产生碎片化<br />不过仍属于concurrent收集器，会额外消耗CPU资源 |\n\n","slug":"垃圾收集器","published":1,"updated":"2021-12-09T07:33:50.722Z","_id":"ckwymfa810004gbglg9lpgsu1","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h3><blockquote>\n<p>现代 JVM 的类型繁多，最主流的四个垃圾收集器分别是：Serial 收集器（常用于单 CPU 环境）、Throughput（或者 Parallel）收集器、Concurrent 收集器（CMS）和 G1 收集器。</p>\n</blockquote>\n<h4 id=\"1-分代收集器\"><a href=\"#1-分代收集器\" class=\"headerlink\" title=\"1.分代收集器\"></a>1.分代收集器</h4><blockquote>\n<p>“虽然实现的细节千差万别，但所有的垃圾收集器都遵循了同一个方式，即根据情况将堆划分成不同的代（Generation）。这些代被称为“老年代”（Old Generation 或 Tenured Generation）和“新生代”（Young Generation）。新生代又被进一步地划分为不同的区段，分别称为 Eden 空间和 Survivor 空间（不过 Eden 有时会被错误地用于指代整个新生代）。”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” Apple Books. </p>\n</blockquote>\n<p>在Java程序当中，垃圾回收大部分处理的都是临时对象，这些临时对象所在的位置就是划分的新生代区域。</p>\n<p>新生代填满时，垃圾收集器会暂停所有的应用线程，回收新生代空间。不再使用的对象会被回收，仍然在使用的对象会被移动到其他地方。这种操作被称为 <strong>Minor GC</strong>。</p>\n<p>在垃圾收集器回收对象整理对象时，对象的引用地址会发生改变，因此此时需确保应用线程不再继续使用这些对象，这段停顿时间被称为 <strong>时空停顿（stop-the-world）</strong>。通常来说，这个停顿时间对应用的性能影响最大，减少时空停顿是调优的关键考量。</p>\n<p>当对象不断从新生代移动到老年代，最终老年代被填满之后，JVM就需要找出老年代中不再使用的对象，并对他们进行回收。简单的垃圾收集算法直接停掉所有应用线程，找出不再使用的对象，进行回收及空间整理，这个过程称为 <strong>Full GC</strong> ，这会导致应用程序长时间的停顿。</p>\n<p>针对这种情况，也诞生了一些<u>无停顿的收集器</u>，例如CMS和G1收集器，此类收集器通过复杂的算法，可以在应用程序保持运行的同时找出不再使用的对象。此类收集器被称为<strong>Concurrent收集器</strong> 或 <strong>低停顿收集器（Low Pause）</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">收集器</th>\n<th align=\"center\">简述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Serial收集器</td>\n<td align=\"center\">最简单的收集器，单线程，无论进行Minor GC 还是Full GC ，清理空间时，都会导致<u>时空停顿</u><br /><strong>-XX:+UseSerialGC</strong></td>\n</tr>\n<tr>\n<td align=\"center\">Throughput收集器（Parallel）</td>\n<td align=\"center\">大多数场景默认的垃圾收集器，多线程，性能明显优于serial<br /><strong>-XX:+UseParallelGC</strong></td>\n</tr>\n<tr>\n<td align=\"center\">CMS收集器</td>\n<td align=\"center\">Minor GC会暂停应用线程，多线程回收，算法标识<br /><strong>-XX:+UseParNewGC</strong><br />Full GC不再暂停应用线程，而是采用多线程定期对老年代扫描回收，消耗额外的CPU资源，且堆变得过度碎片化时会直接采用serial收集方式，产生时空停顿</td>\n</tr>\n<tr>\n<td align=\"center\">G1收集器</td>\n<td align=\"center\">设计初衷是为了尽量缩短处理超大堆（大于 4 GB）时产生的停顿<br />Minor GC处理方式同CMS，<br />老年代空间划分为不同区域，垃圾回收处理方式为复制整理，正常情况下不易产生碎片化<br />不过仍属于concurrent收集器，会额外消耗CPU资源</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"wordcount":1210,"excerpt":"","more":"<h3 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h3><blockquote>\n<p>现代 JVM 的类型繁多，最主流的四个垃圾收集器分别是：Serial 收集器（常用于单 CPU 环境）、Throughput（或者 Parallel）收集器、Concurrent 收集器（CMS）和 G1 收集器。</p>\n</blockquote>\n<h4 id=\"1-分代收集器\"><a href=\"#1-分代收集器\" class=\"headerlink\" title=\"1.分代收集器\"></a>1.分代收集器</h4><blockquote>\n<p>“虽然实现的细节千差万别，但所有的垃圾收集器都遵循了同一个方式，即根据情况将堆划分成不同的代（Generation）。这些代被称为“老年代”（Old Generation 或 Tenured Generation）和“新生代”（Young Generation）。新生代又被进一步地划分为不同的区段，分别称为 Eden 空间和 Survivor 空间（不过 Eden 有时会被错误地用于指代整个新生代）。”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” Apple Books. </p>\n</blockquote>\n<p>在Java程序当中，垃圾回收大部分处理的都是临时对象，这些临时对象所在的位置就是划分的新生代区域。</p>\n<p>新生代填满时，垃圾收集器会暂停所有的应用线程，回收新生代空间。不再使用的对象会被回收，仍然在使用的对象会被移动到其他地方。这种操作被称为 <strong>Minor GC</strong>。</p>\n<p>在垃圾收集器回收对象整理对象时，对象的引用地址会发生改变，因此此时需确保应用线程不再继续使用这些对象，这段停顿时间被称为 <strong>时空停顿（stop-the-world）</strong>。通常来说，这个停顿时间对应用的性能影响最大，减少时空停顿是调优的关键考量。</p>\n<p>当对象不断从新生代移动到老年代，最终老年代被填满之后，JVM就需要找出老年代中不再使用的对象，并对他们进行回收。简单的垃圾收集算法直接停掉所有应用线程，找出不再使用的对象，进行回收及空间整理，这个过程称为 <strong>Full GC</strong> ，这会导致应用程序长时间的停顿。</p>\n<p>针对这种情况，也诞生了一些<u>无停顿的收集器</u>，例如CMS和G1收集器，此类收集器通过复杂的算法，可以在应用程序保持运行的同时找出不再使用的对象。此类收集器被称为<strong>Concurrent收集器</strong> 或 <strong>低停顿收集器（Low Pause）</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">收集器</th>\n<th align=\"center\">简述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Serial收集器</td>\n<td align=\"center\">最简单的收集器，单线程，无论进行Minor GC 还是Full GC ，清理空间时，都会导致<u>时空停顿</u><br /><strong>-XX:+UseSerialGC</strong></td>\n</tr>\n<tr>\n<td align=\"center\">Throughput收集器（Parallel）</td>\n<td align=\"center\">大多数场景默认的垃圾收集器，多线程，性能明显优于serial<br /><strong>-XX:+UseParallelGC</strong></td>\n</tr>\n<tr>\n<td align=\"center\">CMS收集器</td>\n<td align=\"center\">Minor GC会暂停应用线程，多线程回收，算法标识<br /><strong>-XX:+UseParNewGC</strong><br />Full GC不再暂停应用线程，而是采用多线程定期对老年代扫描回收，消耗额外的CPU资源，且堆变得过度碎片化时会直接采用serial收集方式，产生时空停顿</td>\n</tr>\n<tr>\n<td align=\"center\">G1收集器</td>\n<td align=\"center\">设计初衷是为了尽量缩短处理超大堆（大于 4 GB）时产生的停顿<br />Minor GC处理方式同CMS，<br />老年代空间划分为不同区域，垃圾回收处理方式为复制整理，正常情况下不易产生碎片化<br />不过仍属于concurrent收集器，会额外消耗CPU资源</td>\n</tr>\n</tbody></table>\n"},{"title":"关于编译器调优","date":"2020-10-09T09:31:56.000Z","_content":"\n### 编译器调优\n\n#### 1.编译线程\n\n​\t当方法（或者循环）适合编译时，就会进入到编译队列。队列由一个或多个后台线程处理。即编译过程是异步的，这使得代码正在编译时，程序也能持续执行。\n\n<u>**编译队列不严格遵守先进先出的原则**</u>：调用计数次数越多的方法拥有更高的优先级（保证更重要部分代码优先编译），这也是导致PrintCompilation输出中的ID为乱序的另一个原因。\n\n不同编译器默认开启编译线程数：\n\n|     编译器     |                     默认开启编译线程数量                     |\n| :------------: | :----------------------------------------------------------: |\n|  client编译器  |                             1个                              |\n|  server编译器  |                             2个                              |\n| <br />分层编译 | 默认开启多个client和server线程<br />线程数依据一个略微复杂的等式而定<br />包括目标平台CPU数取双对数之后的数值 |\n\n编译器的线程数可通过参数 `-XX:CICompilerCount=N`调整\n\n#### 2.内联\n\n```java\npublic class Point {\n    private int x, y;\n    public void getX() { return x; }\n    public void setX(int i)  { x = i; }\n}\n```\n\n```java\nPoint p = getPoint();\np.setX(p.getX() * 2);\n```\n\n对于上述setter、getter的调用，在编译过后的代码本质上执行的是：\n\n```java\nPoint p = getPoint();\np.x = p.x * 2;\n```\n\n这就是内联。\n\n现在的JVM通常会使用内联代码的方式执行方法，即默认开启内联。\n\n> “方法是否内联取决于它有多热以及它的大小。JVM 依据内部计算来判定方法是否是热点（譬如，调用很频繁）；是否是热点并不直接与任何调优参数相关。如果方法因调用频繁而可以内联，那只有在它的字节码小于 325 字节时（或 -XX:MaxFreqInlineSize=N 所设定的任意值）才会内联。否则，只有方法很小时，即小于 35 字节（或 -XX:MaxInlineSize=N 所设定的任意值）时才会内联。”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” \n\n#### 3.逃逸分析\n\n在开启逃逸分析（-XX:+DoEscapeAnalysis，默认为 true）的情况下，server编译器会执行一些非常激进的优化措施。\n\n```java\npublic class Factorial {\n    private BigInteger factorial;\n    private int n;\n    public Factorial(int n) {\n        this.n = n;\n    }\n    public synchronized BigInteger getFactorial() {\n        if (factorial == null)\n            factorial = ...;\n        return factorial;\n    }\n}\n\nArrayList<BigInteger> list = new ArrayList<BigInteger>();\nfor (int i = 0; i < 100; i++) {\n    Factorial factorial = new Factorial(i);\n    list.add(factorial.getFactorial());\n}\n\n```\n\n在上述代码中，factorial 对象只在循环中引用；没有任何其他代码可以访问该对象。因此，JVM 会毫不犹豫地对这个对象进行一系列优化。\n\n- [ ] 当调用 getFactorial() 时，没必要获得同步锁。\n- [ ] 没必要在内存中保存 n；可以在寄存器中保存该值。同样，factorial 也可以保存在寄存器中。\n- [ ] 事实上，根本就不需要分配实际的 factorial 对象；可以只追踪这个对象的个别字段。\n\n> “此类优化非常复杂：虽然这个例子非常简单，但此类优化可能会伴随更复杂的代码。由于所用的代码不同，并不是所有的优化都有必要使用。但逃逸分析可以决定哪些优化是可能的，并决定编译后的代码中哪些是必要的改变。\n>\n> 逃逸分析默认开启。极少数情况下，它会出错，在此类情况下关闭它会变得更快或更稳定。如果你发现了这种情况，最好的应对行为就是简化相关代码：代码越简单越好。（不过如果是 bug，则应该发送报告。）”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”","source":"_posts/编译器调优.md","raw":"\n---\ntitle: 关于编译器调优\ndate: 2020-10-09 17:31:56\ncategories:\n    - 后端\ntags:\n    - JVM\n---\n\n### 编译器调优\n\n#### 1.编译线程\n\n​\t当方法（或者循环）适合编译时，就会进入到编译队列。队列由一个或多个后台线程处理。即编译过程是异步的，这使得代码正在编译时，程序也能持续执行。\n\n<u>**编译队列不严格遵守先进先出的原则**</u>：调用计数次数越多的方法拥有更高的优先级（保证更重要部分代码优先编译），这也是导致PrintCompilation输出中的ID为乱序的另一个原因。\n\n不同编译器默认开启编译线程数：\n\n|     编译器     |                     默认开启编译线程数量                     |\n| :------------: | :----------------------------------------------------------: |\n|  client编译器  |                             1个                              |\n|  server编译器  |                             2个                              |\n| <br />分层编译 | 默认开启多个client和server线程<br />线程数依据一个略微复杂的等式而定<br />包括目标平台CPU数取双对数之后的数值 |\n\n编译器的线程数可通过参数 `-XX:CICompilerCount=N`调整\n\n#### 2.内联\n\n```java\npublic class Point {\n    private int x, y;\n    public void getX() { return x; }\n    public void setX(int i)  { x = i; }\n}\n```\n\n```java\nPoint p = getPoint();\np.setX(p.getX() * 2);\n```\n\n对于上述setter、getter的调用，在编译过后的代码本质上执行的是：\n\n```java\nPoint p = getPoint();\np.x = p.x * 2;\n```\n\n这就是内联。\n\n现在的JVM通常会使用内联代码的方式执行方法，即默认开启内联。\n\n> “方法是否内联取决于它有多热以及它的大小。JVM 依据内部计算来判定方法是否是热点（譬如，调用很频繁）；是否是热点并不直接与任何调优参数相关。如果方法因调用频繁而可以内联，那只有在它的字节码小于 325 字节时（或 -XX:MaxFreqInlineSize=N 所设定的任意值）才会内联。否则，只有方法很小时，即小于 35 字节（或 -XX:MaxInlineSize=N 所设定的任意值）时才会内联。”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” \n\n#### 3.逃逸分析\n\n在开启逃逸分析（-XX:+DoEscapeAnalysis，默认为 true）的情况下，server编译器会执行一些非常激进的优化措施。\n\n```java\npublic class Factorial {\n    private BigInteger factorial;\n    private int n;\n    public Factorial(int n) {\n        this.n = n;\n    }\n    public synchronized BigInteger getFactorial() {\n        if (factorial == null)\n            factorial = ...;\n        return factorial;\n    }\n}\n\nArrayList<BigInteger> list = new ArrayList<BigInteger>();\nfor (int i = 0; i < 100; i++) {\n    Factorial factorial = new Factorial(i);\n    list.add(factorial.getFactorial());\n}\n\n```\n\n在上述代码中，factorial 对象只在循环中引用；没有任何其他代码可以访问该对象。因此，JVM 会毫不犹豫地对这个对象进行一系列优化。\n\n- [ ] 当调用 getFactorial() 时，没必要获得同步锁。\n- [ ] 没必要在内存中保存 n；可以在寄存器中保存该值。同样，factorial 也可以保存在寄存器中。\n- [ ] 事实上，根本就不需要分配实际的 factorial 对象；可以只追踪这个对象的个别字段。\n\n> “此类优化非常复杂：虽然这个例子非常简单，但此类优化可能会伴随更复杂的代码。由于所用的代码不同，并不是所有的优化都有必要使用。但逃逸分析可以决定哪些优化是可能的，并决定编译后的代码中哪些是必要的改变。\n>\n> 逃逸分析默认开启。极少数情况下，它会出错，在此类情况下关闭它会变得更快或更稳定。如果你发现了这种情况，最好的应对行为就是简化相关代码：代码越简单越好。（不过如果是 bug，则应该发送报告。）”\n>\n> 摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”","slug":"编译器调优","published":1,"updated":"2021-12-09T07:33:44.191Z","_id":"ckwymfa830005gbgldpsagmd3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"编译器调优\"><a href=\"#编译器调优\" class=\"headerlink\" title=\"编译器调优\"></a>编译器调优</h3><h4 id=\"1-编译线程\"><a href=\"#1-编译线程\" class=\"headerlink\" title=\"1.编译线程\"></a>1.编译线程</h4><p>​    当方法（或者循环）适合编译时，就会进入到编译队列。队列由一个或多个后台线程处理。即编译过程是异步的，这使得代码正在编译时，程序也能持续执行。</p>\n<p><u><strong>编译队列不严格遵守先进先出的原则</strong></u>：调用计数次数越多的方法拥有更高的优先级（保证更重要部分代码优先编译），这也是导致PrintCompilation输出中的ID为乱序的另一个原因。</p>\n<p>不同编译器默认开启编译线程数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">编译器</th>\n<th align=\"center\">默认开启编译线程数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">client编译器</td>\n<td align=\"center\">1个</td>\n</tr>\n<tr>\n<td align=\"center\">server编译器</td>\n<td align=\"center\">2个</td>\n</tr>\n<tr>\n<td align=\"center\"><br />分层编译</td>\n<td align=\"center\">默认开启多个client和server线程<br />线程数依据一个略微复杂的等式而定<br />包括目标平台CPU数取双对数之后的数值</td>\n</tr>\n</tbody></table>\n<p>编译器的线程数可通过参数 <code>-XX:CICompilerCount=N</code>调整</p>\n<h4 id=\"2-内联\"><a href=\"#2-内联\" class=\"headerlink\" title=\"2.内联\"></a>2.内联</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> x, y;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getX</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-keyword\">return</span> x; &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setX</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span>  </span>&#123; x = i; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Point p = getPoint();<br>p.setX(p.getX() * <span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n\n<p>对于上述setter、getter的调用，在编译过后的代码本质上执行的是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Point p = getPoint();<br>p.x = p.x * <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这就是内联。</p>\n<p>现在的JVM通常会使用内联代码的方式执行方法，即默认开启内联。</p>\n<blockquote>\n<p>“方法是否内联取决于它有多热以及它的大小。JVM 依据内部计算来判定方法是否是热点（譬如，调用很频繁）；是否是热点并不直接与任何调优参数相关。如果方法因调用频繁而可以内联，那只有在它的字节码小于 325 字节时（或 -XX:MaxFreqInlineSize=N 所设定的任意值）才会内联。否则，只有方法很小时，即小于 35 字节（或 -XX:MaxInlineSize=N 所设定的任意值）时才会内联。”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” </p>\n</blockquote>\n<h4 id=\"3-逃逸分析\"><a href=\"#3-逃逸分析\" class=\"headerlink\" title=\"3.逃逸分析\"></a>3.逃逸分析</h4><p>在开启逃逸分析（-XX:+DoEscapeAnalysis，默认为 true）的情况下，server编译器会执行一些非常激进的优化措施。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Factorial</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> BigInteger factorial;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Factorial</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.n = n;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> BigInteger <span class=\"hljs-title\">getFactorial</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (factorial == <span class=\"hljs-keyword\">null</span>)<br>            factorial = ...;<br>        <span class=\"hljs-keyword\">return</span> factorial;<br>    &#125;<br>&#125;<br><br>ArrayList&lt;BigInteger&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;BigInteger&gt;();<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>    Factorial factorial = <span class=\"hljs-keyword\">new</span> Factorial(i);<br>    list.add(factorial.getFactorial());<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在上述代码中，factorial 对象只在循环中引用；没有任何其他代码可以访问该对象。因此，JVM 会毫不犹豫地对这个对象进行一系列优化。</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 当调用 getFactorial() 时，没必要获得同步锁。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 没必要在内存中保存 n；可以在寄存器中保存该值。同样，factorial 也可以保存在寄存器中。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 事实上，根本就不需要分配实际的 factorial 对象；可以只追踪这个对象的个别字段。</li>\n</ul>\n<blockquote>\n<p>“此类优化非常复杂：虽然这个例子非常简单，但此类优化可能会伴随更复杂的代码。由于所用的代码不同，并不是所有的优化都有必要使用。但逃逸分析可以决定哪些优化是可能的，并决定编译后的代码中哪些是必要的改变。</p>\n<p>逃逸分析默认开启。极少数情况下，它会出错，在此类情况下关闭它会变得更快或更稳定。如果你发现了这种情况，最好的应对行为就是简化相关代码：代码越简单越好。（不过如果是 bug，则应该发送报告。）”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”</p>\n</blockquote>\n","site":{"data":{}},"wordcount":1711,"excerpt":"","more":"<h3 id=\"编译器调优\"><a href=\"#编译器调优\" class=\"headerlink\" title=\"编译器调优\"></a>编译器调优</h3><h4 id=\"1-编译线程\"><a href=\"#1-编译线程\" class=\"headerlink\" title=\"1.编译线程\"></a>1.编译线程</h4><p>​    当方法（或者循环）适合编译时，就会进入到编译队列。队列由一个或多个后台线程处理。即编译过程是异步的，这使得代码正在编译时，程序也能持续执行。</p>\n<p><u><strong>编译队列不严格遵守先进先出的原则</strong></u>：调用计数次数越多的方法拥有更高的优先级（保证更重要部分代码优先编译），这也是导致PrintCompilation输出中的ID为乱序的另一个原因。</p>\n<p>不同编译器默认开启编译线程数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">编译器</th>\n<th align=\"center\">默认开启编译线程数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">client编译器</td>\n<td align=\"center\">1个</td>\n</tr>\n<tr>\n<td align=\"center\">server编译器</td>\n<td align=\"center\">2个</td>\n</tr>\n<tr>\n<td align=\"center\"><br />分层编译</td>\n<td align=\"center\">默认开启多个client和server线程<br />线程数依据一个略微复杂的等式而定<br />包括目标平台CPU数取双对数之后的数值</td>\n</tr>\n</tbody></table>\n<p>编译器的线程数可通过参数 <code>-XX:CICompilerCount=N</code>调整</p>\n<h4 id=\"2-内联\"><a href=\"#2-内联\" class=\"headerlink\" title=\"2.内联\"></a>2.内联</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> x, y;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getX</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-keyword\">return</span> x; &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setX</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span>  </span>&#123; x = i; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Point p = getPoint();<br>p.setX(p.getX() * <span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n\n<p>对于上述setter、getter的调用，在编译过后的代码本质上执行的是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Point p = getPoint();<br>p.x = p.x * <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这就是内联。</p>\n<p>现在的JVM通常会使用内联代码的方式执行方法，即默认开启内联。</p>\n<blockquote>\n<p>“方法是否内联取决于它有多热以及它的大小。JVM 依据内部计算来判定方法是否是热点（譬如，调用很频繁）；是否是热点并不直接与任何调优参数相关。如果方法因调用频繁而可以内联，那只有在它的字节码小于 325 字节时（或 -XX:MaxFreqInlineSize=N 所设定的任意值）才会内联。否则，只有方法很小时，即小于 35 字节（或 -XX:MaxInlineSize=N 所设定的任意值）时才会内联。”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。” </p>\n</blockquote>\n<h4 id=\"3-逃逸分析\"><a href=\"#3-逃逸分析\" class=\"headerlink\" title=\"3.逃逸分析\"></a>3.逃逸分析</h4><p>在开启逃逸分析（-XX:+DoEscapeAnalysis，默认为 true）的情况下，server编译器会执行一些非常激进的优化措施。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Factorial</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> BigInteger factorial;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Factorial</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.n = n;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> BigInteger <span class=\"hljs-title\">getFactorial</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (factorial == <span class=\"hljs-keyword\">null</span>)<br>            factorial = ...;<br>        <span class=\"hljs-keyword\">return</span> factorial;<br>    &#125;<br>&#125;<br><br>ArrayList&lt;BigInteger&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;BigInteger&gt;();<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>    Factorial factorial = <span class=\"hljs-keyword\">new</span> Factorial(i);<br>    list.add(factorial.getFactorial());<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在上述代码中，factorial 对象只在循环中引用；没有任何其他代码可以访问该对象。因此，JVM 会毫不犹豫地对这个对象进行一系列优化。</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 当调用 getFactorial() 时，没必要获得同步锁。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 没必要在内存中保存 n；可以在寄存器中保存该值。同样，factorial 也可以保存在寄存器中。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 事实上，根本就不需要分配实际的 factorial 对象；可以只追踪这个对象的个别字段。</li>\n</ul>\n<blockquote>\n<p>“此类优化非常复杂：虽然这个例子非常简单，但此类优化可能会伴随更复杂的代码。由于所用的代码不同，并不是所有的优化都有必要使用。但逃逸分析可以决定哪些优化是可能的，并决定编译后的代码中哪些是必要的改变。</p>\n<p>逃逸分析默认开启。极少数情况下，它会出错，在此类情况下关闭它会变得更快或更稳定。如果你发现了这种情况，最好的应对行为就是简化相关代码：代码越简单越好。（不过如果是 bug，则应该发送报告。）”</p>\n<p>摘录来自: [美] 奥克斯（Oaks,S.）. “Java性能权威指南。”</p>\n</blockquote>\n"},{"title":"Linux设置swap","date":"2018-05-26T06:12:57.000Z","_content":"\n# Linux设置swap\n\n## 1、创建一个 文件作为swap区\n\n```shell\n# 名字为/swapfile1  大小为bs*count = 1024*2000000=2G，count代表的是大小，这里是2G\ndd if=/dev/zero of=/swapfile1 bs=1024 count=2000000\n\n```\n\n## 2、将其转化为swap文件\n\n```shell\nmkswap /swapfile1\n```\n\n## 3、将其改为只有root权限才能修改\n\n```shell\n# chown root:root /swapfile1\n# chmod 0600 /swapfile1\n```\n\n## 4、将其激活\n\n```shell\nswapon /swapfile1\n```\n\n## 5、如果想要系统重启后生效，可以打开/etc/fstab在最后面加上一行\n\n```shell\nnano /etc/fstab\n\n/swapfile1 swap swap defaults 0 0\n```\n\n","source":"_posts/Linux设置swap.md","raw":"---\ntitle: Linux设置swap\ndate: 2018-05-26 14:12:57\ncategories:\n    - linux\ntags:\n    - linux\n    - swap\n---\n\n# Linux设置swap\n\n## 1、创建一个 文件作为swap区\n\n```shell\n# 名字为/swapfile1  大小为bs*count = 1024*2000000=2G，count代表的是大小，这里是2G\ndd if=/dev/zero of=/swapfile1 bs=1024 count=2000000\n\n```\n\n## 2、将其转化为swap文件\n\n```shell\nmkswap /swapfile1\n```\n\n## 3、将其改为只有root权限才能修改\n\n```shell\n# chown root:root /swapfile1\n# chmod 0600 /swapfile1\n```\n\n## 4、将其激活\n\n```shell\nswapon /swapfile1\n```\n\n## 5、如果想要系统重启后生效，可以打开/etc/fstab在最后面加上一行\n\n```shell\nnano /etc/fstab\n\n/swapfile1 swap swap defaults 0 0\n```\n\n","slug":"Linux设置swap","published":1,"updated":"2021-12-09T07:30:34.567Z","_id":"ckwymsjsz0000nmglb8xa98sk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux设置swap\"><a href=\"#Linux设置swap\" class=\"headerlink\" title=\"Linux设置swap\"></a>Linux设置swap</h1><h2 id=\"1、创建一个-文件作为swap区\"><a href=\"#1、创建一个-文件作为swap区\" class=\"headerlink\" title=\"1、创建一个 文件作为swap区\"></a>1、创建一个 文件作为swap区</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 名字为/swapfile1  大小为bs*count = 1024*2000000=2G，count代表的是大小，这里是2G</span><br>dd if=/dev/zero of=/swapfile1 bs=1024 count=2000000<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2、将其转化为swap文件\"><a href=\"#2、将其转化为swap文件\" class=\"headerlink\" title=\"2、将其转化为swap文件\"></a>2、将其转化为swap文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkswap /swapfile1<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3、将其改为只有root权限才能修改\"><a href=\"#3、将其改为只有root权限才能修改\" class=\"headerlink\" title=\"3、将其改为只有root权限才能修改\"></a>3、将其改为只有root权限才能修改</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> chown root:root /swapfile1</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> chmod 0600 /swapfile1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4、将其激活\"><a href=\"#4、将其激活\" class=\"headerlink\" title=\"4、将其激活\"></a>4、将其激活</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">swapon /swapfile1<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5、如果想要系统重启后生效，可以打开-etc-fstab在最后面加上一行\"><a href=\"#5、如果想要系统重启后生效，可以打开-etc-fstab在最后面加上一行\" class=\"headerlink\" title=\"5、如果想要系统重启后生效，可以打开/etc/fstab在最后面加上一行\"></a>5、如果想要系统重启后生效，可以打开/etc/fstab在最后面加上一行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nano /etc/fstab<br><br>/swapfile1 swap swap defaults 0 0<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":334,"excerpt":"","more":"<h1 id=\"Linux设置swap\"><a href=\"#Linux设置swap\" class=\"headerlink\" title=\"Linux设置swap\"></a>Linux设置swap</h1><h2 id=\"1、创建一个-文件作为swap区\"><a href=\"#1、创建一个-文件作为swap区\" class=\"headerlink\" title=\"1、创建一个 文件作为swap区\"></a>1、创建一个 文件作为swap区</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 名字为/swapfile1  大小为bs*count = 1024*2000000=2G，count代表的是大小，这里是2G</span><br>dd if=/dev/zero of=/swapfile1 bs=1024 count=2000000<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2、将其转化为swap文件\"><a href=\"#2、将其转化为swap文件\" class=\"headerlink\" title=\"2、将其转化为swap文件\"></a>2、将其转化为swap文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkswap /swapfile1<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3、将其改为只有root权限才能修改\"><a href=\"#3、将其改为只有root权限才能修改\" class=\"headerlink\" title=\"3、将其改为只有root权限才能修改\"></a>3、将其改为只有root权限才能修改</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> chown root:root /swapfile1</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> chmod 0600 /swapfile1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4、将其激活\"><a href=\"#4、将其激活\" class=\"headerlink\" title=\"4、将其激活\"></a>4、将其激活</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">swapon /swapfile1<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5、如果想要系统重启后生效，可以打开-etc-fstab在最后面加上一行\"><a href=\"#5、如果想要系统重启后生效，可以打开-etc-fstab在最后面加上一行\" class=\"headerlink\" title=\"5、如果想要系统重启后生效，可以打开/etc/fstab在最后面加上一行\"></a>5、如果想要系统重启后生效，可以打开/etc/fstab在最后面加上一行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nano /etc/fstab<br><br>/swapfile1 swap swap defaults 0 0<br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwymsjsz0000nmglb8xa98sk","category_id":"ckwympr2c0001l4gl6kv61ltp","_id":"ckwymsjt50001nmglac3n53nu"},{"post_id":"ckwymfa800002gbgla9o79pmc","category_id":"ckwympr2c0001l4gl6kv61ltp","_id":"ckwyn04ox0003pvgldvnu8a55"},{"post_id":"ckwymfa830005gbgldpsagmd3","category_id":"ckwyn04or0002pvgl42okhqop","_id":"ckwyn04oy0005pvgl3qk4awk6"},{"post_id":"ckwymfa7t0000gbgle1dy5gm0","category_id":"ckwyn04or0002pvgl42okhqop","_id":"ckwyn04oz0006pvgl0gwx658j"},{"post_id":"ckwymfa810004gbglg9lpgsu1","category_id":"ckwyn04or0002pvgl42okhqop","_id":"ckwyn04oz0007pvglbfzl2njh"},{"post_id":"ckwymfa810003gbgl7x7aemm6","category_id":"ckwyn04or0002pvgl42okhqop","_id":"ckwyn04oz0008pvgl90vw2fys"}],"PostTag":[{"post_id":"ckwymfa7t0000gbgle1dy5gm0","tag_id":"ckwyn9ixi0001t2glgf2l8pyb","_id":"ckwyn9ixn0003t2gl03mu3nam"},{"post_id":"ckwymsjsz0000nmglb8xa98sk","tag_id":"ckwyn9ixn0002t2gl0rggbmqt","_id":"ckwyn9ixr0006t2gl2ajxgms3"},{"post_id":"ckwymsjsz0000nmglb8xa98sk","tag_id":"ckwyn9ixp0004t2glfxz5f9zp","_id":"ckwyn9ixr0007t2glgwd347n1"},{"post_id":"ckwymfa800002gbgla9o79pmc","tag_id":"ckwyn9ixn0002t2gl0rggbmqt","_id":"ckwyn9ixs000bt2gl1cww7uw3"},{"post_id":"ckwymfa800002gbgla9o79pmc","tag_id":"ckwyn9ixr0008t2gl6z2q8wsk","_id":"ckwyn9ixs000ct2gl0py9eio0"},{"post_id":"ckwymfa800002gbgla9o79pmc","tag_id":"ckwyn9ixr0009t2gl294c81qf","_id":"ckwyn9ixs000et2gl2comadt5"},{"post_id":"ckwymfa810003gbgl7x7aemm6","tag_id":"ckwyn9ixs000at2glb5a9cn3r","_id":"ckwyn9ixs000ft2gl751rb1jz"},{"post_id":"ckwymfa810004gbglg9lpgsu1","tag_id":"ckwyn9ixs000dt2gl8knpdlf0","_id":"ckwyn9ixt000it2gl8tos72jy"},{"post_id":"ckwymfa810004gbglg9lpgsu1","tag_id":"ckwyn9ixt000gt2gl9usc1365","_id":"ckwyn9ixt000jt2gl38thbcxu"},{"post_id":"ckwymfa830005gbgldpsagmd3","tag_id":"ckwyn9ixt000gt2gl9usc1365","_id":"ckwyn9ixu000kt2gl3l5j4g66"}],"Tag":[{"name":"elasticsearch","_id":"ckwyn9ixi0001t2glgf2l8pyb"},{"name":"linux","_id":"ckwyn9ixn0002t2gl0rggbmqt"},{"name":"swap","_id":"ckwyn9ixp0004t2glfxz5f9zp"},{"name":"WireGuard","_id":"ckwyn9ixr0008t2gl6z2q8wsk"},{"name":"VPN","_id":"ckwyn9ixr0009t2gl294c81qf"},{"name":"序列化","_id":"ckwyn9ixs000at2glb5a9cn3r"},{"name":"垃圾收集器","_id":"ckwyn9ixs000dt2gl8knpdlf0"},{"name":"JVM","_id":"ckwyn9ixt000gt2gl9usc1365"}]}}